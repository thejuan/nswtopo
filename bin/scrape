#!/usr/bin/env ruby

require 'cgi'
require 'json'
require 'ostruct'
require 'optparse'
require 'rexml/document'
require_relative '../lib/nswtopo/geometry'

FORMATS, TILE = %w[shp tab gpkg sqlite], 1000
ServerError = Class.new StandardError

def get_response(url, query = {})
  query = query.map do |key, value|
    "#{key}=#{CGI.escape value.to_s}"
  end.join(?&)
  IO.popen %Q[curl --config -], 'r+' do |pipe|
    pipe.puts %Q[--user-agent "Ruby/#{RUBY_VERSION}"]
    pipe.puts %Q[--referer "#{url}"]
    pipe.puts %Q[--silent]
    pipe.puts %Q[--fail]
    pipe.puts %Q[--netrc-optional]
    pipe.puts %Q[--compressed]
    pipe.puts %Q[--url "#{url}?#{query}"]
    pipe.close_write
    pipe.read
  end.tap do |response|
    raise ServerError, 'server error' if $?.exitstatus == 22
    raise ServerError, 'empty response' if response.empty? && $?.success?
  end
end

def get_json(url, query = {}, parsed = true)
  json = get_response url, query.merge(f: 'json')
  data = JSON.parse json
  error = data['error']
  raise ServerError, [ [ error['message'], error['code'] && '(%s)' % error['code'] ].compact.join(?\s), *error['details'] ].join(?\n) if error
  parsed ? data : json
rescue JSON::ParserError => error
  raise ServerError, $?.success? ? "JSON: #{error.message}" : "curl failed with #{url}"
end

def try_repeatedly(tries)
  tries.times.find do
    break yield
  rescue ServerError
  ensure
    sleep 1
    false
  end
end

begin
  options = OpenStruct.new(tries: 5)
  parser = OptionParser.new("Scrape data from an ArcGIS REST endpoint.\nUsage: scrape [options] url path") do |parser|
    parser.on '-n', '--name       NAME', /^\w+$/, 'name of saved layer'
    parser.on '-f', '--format     FORMAT', FORMATS, "output file format [#{FORMATS.join ?|}]"
    parser.on '-w', '--where      WHERE', String, 'filtering clause'
    parser.on       '--fields     FIELDS', Array, 'comma-separated list of fields'
    parser.on '-g', '--geometry   X0,Y0,X1,Y1', Array, 'WGS84 coordinates of bounding box corners'
    parser.on '-p', '--paginate   PAGINATE', Integer, 'number of records per request'
    parser.on '-t', '--tries      TRIES', Integer, 'number of tries before reducing request size'
    parser.on '-e', '--epsg       EPSG', Integer, 'EPSG number for data retrieval'
    parser.on '-r', '--reproject  EPSG', Integer, 'EPSG number for local reprojection'
    parser.on '-u', '--unique     FIELD', String, 'field for counting features'
    parser.on '-c', '--concat', 'concatenate paged results before saving'
    parser.on '-d', '--decode', 'convert coded field values where possible'
    parser.on '-q', '--quiet', "don't show progress"
  end
  parser.order!(into: options) do |arg|
    case
    when !options.url then options.url = (/^https?:\/\// === arg ? arg : "http://#{arg}").chomp(?/)
    when !options.path then options.path = arg
    else raise OptionParser::InvalidArgument, arg
    end
  end
  abort parser.to_s unless options.url && options.path
  raise OptionParser::InvalidArgument, options.url unless /.*\/(FeatureServer|MapServer)\/\d+$/ === options.url
  options.format ||= case options.path
  when /\.db$/       then 'sqlite'
  when /\.sqlite3?$/ then 'sqlite'
  when /\.gpkg/      then 'gpkg'
  else 'shp'
  end
  options.concat = true if options.format == 'shp'

  layer = get_json options.url

  [ *options.fields, *options.unique ].each do |name|
    abort "invalid field: #{name}" unless layer['fields'].any? do |field|
      field['name'] == name
    end
  end

  geometry_type = layer['geometryType']
  options.name ||= layer['name'].gsub(/[^\w]+/, ?_)
  format_flags = case
  when File.exists?(options.path) then %Q[-update -overwrite]
  when options.format == 'shp'    then %Q[-f "ESRI Shapefile"]
  when options.format == 'tab'    then %Q[-f "MapInfo File"]
  when options.format == 'gpkg'   then %Q[-f GPKG]
  when options.format == 'sqlite' then %Q[-f SQLite -dsco SPATIALITE=YES]
  end
  type_flag = case
  when options.concat
  when geometry_type == 'esriGeometryPoint'
  when options.format == 'sqlite' then %Q[-nlt PROMOTE_TO_MULTI]
  when options.format == 'gpkg'   then %Q[-nlt PROMOTE_TO_MULTI]
  end
  srs_flag = %Q[-t_srs epsg:#{options.reproject}] if options.reproject

  objectid_field, geometry_field = %w[esriFieldTypeOID esriFieldTypeGeometry].map do |type|
    layer['fields'].find do |field|
      type == field['type']
    end.fetch('name')
  end

  if layer['typeIdField']
    typeid_field = layer['fields'].find do |field|
      field.values_at('alias', 'name').include? layer['typeIdField']
    end.fetch('name')
    type_values = layer['types'].map do |type|
      type.values_at 'id', 'name'
    end.to_h
  end

  coded_values = layer['fields'].select do |field|
    field.dig('domain', 'type') == 'codedValue'
  end.map do |field|
    codes = field['domain']['codedValues'].map do |pair|
      pair.values_at 'code', 'name'
    end.to_h
    [ field['name'], codes ]
  end.to_h

  Enumerator.new do |yielder|
    paginate = options.paginate || [ 1000, layer.fetch('maxRecordCount', 1000) ].min
    case layer['capabilities']
    when /Query|Data/
      query = { returnIdsOnly: true, where: options.where || '1=1' }
      if options.geometry
        raise OptionParser::InvalidOption, "argument for --geometry must be in x0,y0,x1,y1 format" unless options.geometry.length == 4
        query.merge!(inSR: 4326, geometry: options.geometry.map(&:to_f).each_slice(2).to_a.transpose.map(&:sort).transpose.flatten.join(?,))
      end
      objectids = get_json("#{options.url}/query", query)['objectIds']
      raise ServerError, 'no results returned' unless objectids
      query = { outFields: (options.fields || %w[*]).join(?,) }
      query.merge!(outSR: options.epsg) if options.epsg
      total, requests, start = objectids.length, 0, Time.now
      while objectids.any?
        json = try_repeatedly(options.tries) do
          requests += 1
          get_json "#{options.url}/query", query.merge(objectIds: objectids.take(paginate).join(?,)), false
        end
        case
        when json
          yielder << json
          objectids.shift paginate
          next if options.quiet
          seconds = ((objectids.length.to_f / paginate).ceil * (Time.now - start) / requests).to_i
          estimate = ('%i:%02i:%02is' % [ seconds / 3600, (seconds % 3600) / 60, seconds % 60 ]).sub(/^0:(0(0:0?)?)?/, '')
          $stderr << "retrieving %s features: %6.2f%% of %i features, %s remaining    \r" % [ options.name, 100.0 * (total - objectids.length) / total, total, estimate ]
        when paginate > 1
          paginate /= 2
          $stderr.puts "WARNING: retrying #{options.name} at #{paginate} features per request                             " unless options.quiet
        else raise ServerError, 'failed at one feature per request'
        end
      end
    when /Map/
      raise OptionParser::InvalidOption, "can't use --epsg with this server" if options.epsg
      raise OptionParser::InvalidOption, "can't use --geometry with this server" if options.geometry
      wkid = layer['extent']['spatialReference']['latestWkid'] || layer['extent']['spatialReference']['wkid']
      service_url = options.url.match(/(.*)\/(\d+)$/)[1]

      parent = layer
      scale = loop do
        break parent['minScale'] if parent['minScale']&.nonzero?
        break parent['effectiveMinScale'] if parent['effectiveMinScale']&.nonzero?
        break unless parent_id = parent.dig('parentLayer', 'id')
        parent = get_json "#{service_url}/#{parent_id}"
      end || begin
        service = get_json service_url
        case service['units']
        when 'esriMeters' then 100000
        else raise ServerError, "can't handle epsg:#{wkid}"
        end
      end

      renderer = case geometry_type
      when 'esriGeometryPoint'
        { type: 'simple', symbol: { color: [0,0,0,255], size: 1, type: 'esriSMS', style: 'esriSMSSquare' } }
      when 'esriGeometryPolyline'
        { type: 'simple', symbol: { color: [0,0,0,255], width: 1, type: 'esriSLS', style: 'esriSLSSolid' } }
      when 'esriGeometryPolygon'
        { type: 'simple', symbol: { color: [0,0,0,255], width: 0, type: 'esriSFS', style: 'esriSFSSolid' } }
      else
        abort "unable to process '%s' geometry type" % geometry_type
      end
      dynamic_layer = { source: { type: 'mapLayer', mapLayerId: layer['id'] }, drawingInfo: { showLabels: false, renderer: renderer } }

      unique = options.unique || objectid_field
      renderer = get_json "#{service_url}/dynamicLayer/generateRenderer", where: options.where, layer: dynamic_layer.to_json, classificationDef: { type: 'uniqueValueDef', uniqueValueFields: [ unique, unique ] }.to_json
      total = renderer.fetch('uniqueValueInfos').map do |info|
        info['count']
      end.sum

      bounds = layer['extent'].values_at('xmin', 'xmax', 'ymin', 'ymax').each_slice(2)
      cx, cy = bounds.map { |bound| 0.5 * bound.sum }
      dpi = bounds.map { |b0, b1| 0.0254 * TILE * scale / (b1 - b0) }.min * 0.999

      table = Hash.new do |hash, objectid|
        hash[objectid] = { }
      end

      fields = layer['fields'].select do |field|
        %W[esriFieldTypeOID esriFieldTypeInteger esriFieldTypeSmallInteger esriFieldTypeDouble esriFieldTypeSingle esriFieldTypeString esriFieldTypeGUID esriFieldTypeDate].include? field['type']
      end.select do |field|
        !options.fields || options.fields.include?(field['name'])
      end.map do |field|
        field.slice 'name', 'type', 'length'
      end
      collection = { 'geometryType' => geometry_type, 'spatialReference' => { 'wkid' => wkid }, 'fields' => fields }

      max, delimiters = 0, %w[| ~ ^]
      while table.length < total
        min, max = max, max + 10000
        fields.map do |field|
          field.values_at 'name', 'type'
        end.each_slice(2).yield_self do |pairs|
          pairs.any? ? pairs.map(&:transpose) : [[[],[]]]
        end.each do |names, types|
          where = [ "#{objectid_field}>=#{min}", "#{objectid_field}<#{max}", options.where ].compact.map do |clause|
            "(#{clause})"
          end.join(' AND ')
          response = get_json "#{service_url}/dynamicLayer/generateRenderer", where: where, layer: dynamic_layer.to_json, classificationDef: { type: 'uniqueValueDef', uniqueValueFields: [ objectid_field, *names ], fieldDelimiter: delimiters.first }.to_json
          rows = response['uniqueValueInfos'].map do |info|
            info['value'].split(delimiters.first).map(&:strip)
          end
          delimiters.rotate! and redo if rows.any? { |row| row.length > 1 + names.length }
          rows.each do |objectid, *values|
            attributes = table[objectid.to_i]
            values.zip(types, names).each do |value, type, name|
              attributes[name] = case
              when value == '<Null>' then nil
              when value == '' then nil
              when type == 'esriFieldTypeOID' then Integer(value)
              when type == 'esriFieldTypeInteger' then Integer(value)
              when type == 'esriFieldTypeSmallInteger' then Integer(value)
              when type == 'esriFieldTypeDouble' then Float(value)
              when type == 'esriFieldTypeSingle' then Float(value)
              when type == 'esriFieldTypeString' then String(value)
              when type == 'esriFieldTypeGUID' then String(value)
              when type == 'esriFieldTypeDate' then String(value)
              end
            rescue ArgumentError
              raise ServerError, "could not interpret #{value.inspect} as #{type}"
            end
          end
        end
        $stderr << "retrieving %s attributes: %6.2f%% of %i features\r" % [ options.name, 100.0 * table.length / total, total ] unless options.quiet
      end
      $stderr.puts unless options.quiet

      count, requests, start = 0, 0, Time.now
      sets = table.group_by do |objectid, attributes|
        attributes
      end.sort_by do |attributes, objectids_attributes|
        objectids_attributes.length
      end
      while sets.any?
        attributes, objectids_attributes = sets.shift
        objectids = objectids_attributes.transpose.first
        while objectids.any?
          ids = objectids.take paginate
          dynamic_layers = [ dynamic_layer.merge(definitionExpression: "#{objectid_field} IN (#{ids.join ?,})") ]
          export = try_repeatedly(options.tries) do
            requests += 1
            get_json "#{service_url}/export", format: 'svg', dynamicLayers: dynamic_layers.to_json, bbox: "#{cx},#{cy},#{cx},#{cy}", size: "#{TILE},#{TILE}", mapScale: scale, dpi: dpi
          end
          case
          when export
          when paginate > 1
            paginate /= 2
            $stderr.puts "WARNING: retrying #{options.name} at #{paginate} features per request                             " unless options.quiet
            next
          else raise ServerError, 'failed at one feature per request'
          end
          href, extent = export.values_at 'href', 'extent'
          xmin, xmax, ymin, ymax = extent.values_at 'xmin', 'xmax', 'ymin', 'ymax'
          xml = get_response href
          geometries = REXML::Document.new(xml).elements.collect('svg//g[@transform]//g[@transform][path[@d]]') do |group|
            a, b, c, d, e, f =  group.attributes['transform'].match(/matrix\((.*)\)/)[1].split(?\s).map(&:to_f)
            lines = []
            group.elements['path[@d]'].attributes['d'].gsub(/\ *([MmZzLlHhVvCcSsQqTtAa])\ */) do
              ?\s + $1 + ?\s
            end.strip.split(?\s).slice_before(/[MmZzLlHhVvCcSsQqTtAa]/).each do |command, *numbers|
              raise ServerError, "can't handle SVG path data command '#{command}'" unless numbers.length.even?
              coordinates = numbers.each_slice(2).map do |x, y|
                fx, fy = [ (a * Float(x) + c * Float(y) + e) / TILE, (b * Float(x) + d * Float(y) + f) / TILE ]
                [ fx * xmax + (1 - fx) * xmin, fy * ymin + (1 - fy) * ymax ]
              end
              case command
              when ?Z then next
              when ?M then lines << coordinates
              when ?L then lines.last.concat coordinates
              when ?C
                coordinates.each_slice(3) do |points|
                  raise ServerError, 'unexpected SVG response (bad path data)' unless points.length == 3
                  curves = [ [ lines.last.last, *points ] ]
                  while curve = curves.shift
                    next if curve.first == curve.last
                    if curve.values_at(0,-1).distance < 0.99 * curve.segments.map(&:distance).sum
                      reduced = 3.times.inject [ curve ] do |reduced|
                        reduced << reduced.last.each_cons(2).map do |v0, v1|
                          v0.plus(v1).times(0.5)
                        end
                      end
                      curves.unshift reduced.map(&:last).reverse
                      curves.unshift reduced.map(&:first)
                    else
                      lines.last << curve.last
                    end
                  end
                end
              else raise ServerError, "can't handle SVG path data command '#{command}'"
              end
            end
            case geometry_type
            when 'esriGeometryPoint'
              raise ServerError, 'unexpected SVG response (bad point symbol)' unless lines.map(&:length) == [ 4 ]
              point = lines[0].transpose.map { |coords| coords.sum / coords.length }
              { 'x' => point[0], 'y' => point[1] }
            when 'esriGeometryPolyline'
              { 'paths' => lines }
            when 'esriGeometryPolygon'
              { 'rings' => lines }
            end
          end
          raise ServerError, 'unexpected SVG response (extra content)' if geometries.length > ids.length
          features = ids.zip(geometries).map do |objectid, geometry|
            { 'attributes' => attributes, 'geometry' => geometry }
          end
          yielder << collection.merge('features' => features)
          objectids.shift paginate
          next if options.quiet
          count += ids.length
          remaining = sets.map(&:last).map(&:length).push(objectids.length).map do |length|
            (length.to_f / paginate).ceil
          end.inject(&:+)
          seconds = (remaining * (Time.now - start) / requests).to_i
          estimate = ('%i:%02i:%02is' % [ seconds / 3600, (seconds % 3600) / 60, seconds % 60 ]).sub(/^0:(0(0:0?)?)?/, '')
          $stderr << "retrieving %s geometries: %6.2f%% of %i features, %s remaining    \r" % [ options.name, 100.0 * count / total, total, estimate ]
        end
      end
    else
      abort "can't scrape data from #{options.url}"
    end
    $stderr.puts unless options.quiet
  end.yield_self do |pages|
    next pages unless options.concat
    collection = pages.map do |page|
      String === page ? JSON.parse(page) : page
    end.inject do |collection, page|
      collection['features'] += page['features']
      collection
    end
    [ collection ]
  end.inject(format_flags) do |flags, page|
    if options.decode && typeid_field && (!options.fields || options.fields.include?(typeid_field))
      page = JSON.parse(page) if String === page
      page['fields'].find do |field|
        field['name'] == typeid_field
      end.store('type', 'esriFieldTypeString')
      page['features'].map do |feature|
        feature['attributes']
      end.each do |attributes|
        attributes[typeid_field] = type_values[attributes[typeid_field]]
      end
    end
    if options.decode && coded_values.any? && (!options.fields || (options.fields & coded_values.keys).any?)
      page = JSON.parse(page) if String === page
      page['fields'].each do |field|
        field['type'] = 'esriFieldTypeString' if coded_values[field['name']]
      end
      page['features'].map do |feature|
        feature['attributes']
      end.each do |attributes|
        coded_values.each do |name, codes|
          next unless attributes.key?(name)
          attributes[name] = codes[attributes[name]]
        end
      end
    end
    IO.popen %Q[ogr2ogr -skipfailures #{flags} #{srs_flag} #{type_flag} -nln #{options.name} "#{options.path}" /vsistdin/], 'w' do |pipe|
      pipe.write String === page ? page : page.to_json
    end
    abort 'ogr2ogr failed' unless $?.success?
    '-update -append'
  end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument, OptionParser::InvalidArgument => e
  abort e.message
rescue ServerError => error
  abort "\nERROR: #{error.message}"
rescue Interrupt
  abort "\nInterrupted."
end
